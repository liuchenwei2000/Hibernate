
ORM在进行数据读取时，会根据其缓存管理策略，首先在缓存中查询，如果在缓存中发现所需数据（命中）则直接以此数据作为查询结果加以利用，从而避免了数据库调用的性能开销。

ORM的数据缓存包含如下几个层次：

1，事务级缓存（Transaction Layer Cache）
在当前事务范围内的数据缓存策略。
对Hibernate而言，事务级缓存是基于Session生命周期实现的，每个Session会在内部维持一个数据缓存，
此缓存随着Session的创建（销毁）而存在（消亡），因此也称为Session Level Cache。

2，应用级（进程级）缓存（Application/Process Layer Cache）
某个应用中的共享缓存。
此缓存可由多个事务共享，在Hibernate中，应用级缓存在SessionFactory层实现，
所有由此SessionFactory创建的Session实例共享此缓存，因此也称为SessionFactory Level Cache。

3，分布式缓存（Cluster Layer Cache）
在多个应用实例、多个JVM之间共享的缓存模式。
分布式缓存由多个应用级缓存实例组成集群，通过某种远程通信机制（RMI或JMS）实现各个缓存实例间的数据同步，任何一个实例的数据修改操作将导致整个集群间的数据状态同步。
分布式缓存解决了多实例并发运行过程中的数据同步问题。

需要注意的是，如果应用和其他应用共享数据库，也就是说，在当前应用运行过程中，其他应用可能同时更新数据库，
那么缓存策略的制定就需要小心，这种情况下，采取一些保守策略（避免缓存机制的使用）更加稳妥。
